package cuka.martin.netbeans.gui;

import cuka.martin.core.ITicking;
import cuka.martin.listeners.loaders.MyKeyListener;
import java.awt.Graphics;
import java.awt.Image;
import java.util.concurrent.ExecutionException;
import javax.swing.ImageIcon;
import javax.swing.SwingWorker;

/**
 * Ikonka javatara, tento Panel pouzivam do JFramu vytvoreneho cez netbeans ako
 * moje kresliace platno, vykresluje beziaceho Javatara.
 *
 * @author Martin ÄŒuka
 */
public final class JavatarIcon extends javax.swing.JPanel implements ITicking {

    private static final int FPS = 17;
    private static final int FRAMES = 11;
    private static final int DELAY = 5;

    private final Image imgChar;

    private boolean isRunning = true;
    private int count = 0;
    private int frame = 0;

    /**
     * Creates new form JavatarIcon
     */
    public JavatarIcon() {
        initComponents();
        imgChar = new ImageIcon(this.getClass().
                getResource("/mainCharacter.png")).getImage();
    }

    /**
     * Odstartuje vlakno ktore bude refreshovat panel.
     */
    public void startThread() {
        new WorkerThread().execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Vykresli ikonku beziaceho javatara, casom sa menia obrazky
     *
     * @param g - grafika
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        int sizeOfImage = 100;
        int dx = frame * sizeOfImage; // nacitavam 0ty riadok obrazku, stlpce sa menia...
        //int dy = 0 * sizeOfImage; nacitava 0ty riadok obrazku... riadok je stale 0....

        g.drawImage(imgChar, getX(), getY(),
                getX() + sizeOfImage, getY() + sizeOfImage,
                dx, 0, dx + sizeOfImage, sizeOfImage, null);

        count++;
        frame = tick(count, frame, DELAY, FRAMES);
        invalidate();
    }

    /**
     * Prehadzuje framy na vykreslenie
     *
     * @param count - pocitadlo refreshnuti
     * @param frame - ktory frame aktualne vykresluje
     * @param delay - delay na prehadzovanie framov
     * @param MAX - index maximalneho framu
     * @return vrati frame ktory sa ma vykreslit
     */
    @Override
    public int tick(int count, int frame, int delay, int MAX) {
        int newFrame = frame;
        if (count % delay == 0) {
            newFrame = frame + 1;
            if (frame == MAX - 1) {
                newFrame = 1;
            }
        }
        return newFrame;
    }

    /**
     * Privatna trieda, ktora odstartuje vlakno prepinajuce obrazky Javatar.
     */
    private class WorkerThread extends SwingWorker<String, Object> {

        /**
         * Metoda spusta vlakno ktore refreshuje panel a zobrazuje na nom
         * beziaceho Javatara na 60 FPS.
         */
        @Override
        protected String doInBackground() throws Exception {
            while (isRunning) {
                if (MyKeyListener.getInstance().isExit()) {
                    isRunning = false;
                }
                repaint(); // call update, clear screen and call paint method
                try {
                    Thread.sleep(FPS); // ....nepotrebujem presne 60 fps....
                } catch (InterruptedException ex) {
                    System.err.println("InterruptedException: " + ex.getMessage());
                }
            }
            return "Thanks for playing";
        }

        /**
         * Pri vypnuti skratkou ALT+Q vypise spravu na terminal :-).
         */
        @Override
        protected void done() {
            try {
                System.out.println(get());
            } catch (InterruptedException | ExecutionException ignore) {
                System.err.println(ignore.getMessage());
            } finally {
                Runtime.getRuntime().halt(0); // spravne nenasilne vypnutie
            }
        }
    }
}
